JavaFXLibrary is a test library for Robot Framework targeted for UI acceptance testing of JavaFX applications.
JavaFXLibrary can be run with both Jython and Python version of Robot Framework and both in Local and Remote mode.

In short, this library is a wrapper for [https://github.com/TestFX/TestFX|TestFX], which is a Java library for testing JavaFX UI applications.

== 1. Preparations before running the tests ==
- JavaFXLibrary needs to be compiled and packaged. [https://github.com/eficode/JavaFXLibrary/releases/latest|Download JAR release] or clone the [https://github.com/eficode/JavaFXLibrary.git|repository] and run _mvn package_ from the root folder.
- The tested application and the JavaFXLibrary jars need to be added to CLASSPATH.
- Once the library jar -file is available, the library can be taken into use in two ways: *Local mode* with _Jython_ and *Remote mode* with both _Jython_ and _Python_ version of Robot Framework.

== 2.1 Usage in local mode(Jython only) ==

First, the JavaFXLibrary needs to be taken into use in the settings table.
| *Settings* | *Value* |
| Library | JavaFXLibrary |

Experimental headless mode can be activated at the import time by setting first argument to ${True}
| *Settings* | *Value* |
| Library | JavaFXLibrary | ${True} |

== 2.2 Launch application ==

In test data start application like this (setting of classpath is optional if Java Agent is used)

| *Keyword* | *Argument* |
| Set To Classpath | your_application.jar |
| Launch Javafx Application | org.yourmodule.mainClass |

== 2.3 Usage in remote mode(Jython & Python) ==

=== 2.3.1 Start remote library manually ===

When using the test library in remote mode, the library needs to be started at the remote end first. This can be done as follows:
- _java -jar javafxlibrary-<version>.jar_
This will start the remote server listening at default port number 8270.

If there is a need to use a different port the library can be started with optional parameter:
- _java -jar javafxlibrary-<version>.jar 1234_
This will start the remote server listening on port 1234.

JavaFXLibrary can be taken into use as remote library in settings table as follows:
| *Settings* | *Value* |
| Library | Remote | http://localhost:8270 | WITH NAME | JavaFXLibrary |

Multiple JavaFXLibraries in remote mode:
| *Settings* | *Value* |
| Library | Remote | ip_address:8270 | WITH NAME | my_application |
| Library | Remote | ip_address:8271 | WITH NAME | my_other_application |

Experimental headless mode can be activated in remote mode at the import time by setting first argument to ${True}
| *Settings* | *Value* |
| Library | Remote | http://localhost:8270 | ${True} | WITH NAME | JavaFXLibrary |

Launch application like in `2.2 Launch application`.

=== 2.3.2 Start remote library as Java Agent ===

Library can be used as java agent. Launch application with `-javaagent:/path/to/javafxlibrary-<version>.jar`.
Default port is 8270 and can be changed with adding `=<port>` to java agent command. Only remote library is supported.
Using `Launch JavaFX Application` is still required but instead of starting new application keyword initializes Stage
for library (see `2.2 Launch application`).

== 3. Locating JavaFX Nodes ==
=== 3.1 Locator syntax ===
JavaFXLibrary offers different query types for locating objects: *id*, *css*, *class*, *text*, *xpath* and *pseudo*.
Query type is defined by using a prefix. Note that in css type id's '#'-character must be escaped as it begins a
comment in Robot Framework.

| *Example Query* | *Description* |
| id=submitButton | Returns a node with id submitButton. Basically same as default query "_\#submitButton_". |
| css=VBox > .customStyle | Returns a node matching the CSS selector. |
| css=.customStyle \#button-id | Combined CSS selector with id. |
| class=javafx.scene.shape.Rectangle | Returns a node that is an instance of the given class. |
| text="Submit" | Returns a node with text value _Submit_. The value must be inside quotation marks. Works only with [https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Labeled.html|Labeled] nodes. |
| text="Text with \"quotation\" marks" | Text value can contain spaces and quotation marks, but inner quotation marks must be escaped using _'\'_ backslash character. |
| xpath=//Rectangle[@fill="0xff1493ff"] | Returns a Rectangle that has fill value _0xff1493ff_. See `3.3 About XPath queries` for more details about using xpath queries. |
| pseudo=hover;focused | Returns a node that contains pseudo class states _hover_ and _focused_. See `3.4 About Pseudo queries` for more details about using pseudo queries. |

These queries can be chained to move in application UI tree more precisely. The result of the previous query
is used as the root of the next query. Only queries with prefixes can be chained.
| *Example Query* | *Description* |
| xpath=/VBox/HBox[4] css=Label | Finds 4th HBox child of VBox and returns the Label it contains. |
| css=VBox HBox xpath=//Rectangle[@width="600.0"] | Finds the HBox using CSS query and proceeds to find a Rectangle that is 600px wide and is located in the HBox. |
| id=main-view css=.save-button | Finds css .button under id main-view. |
| class=com.eficode.WrapperNode css=.styleClass text="toggle fullscreen" | Returns a node containing text _toggle fullscreen_ that has a parent which contains style class _styleClass_ and has a parent that is an instance of the WrapperNode class. |

=== 3.2 Using locators as keyword arguments ===
Locators can be given as arguments for every JavaFXLibrary keyword that accepts a node as an argument. This is useful as it
helps keeping the test case implementations cleaner and easier to read. However sometimes it is more convenient to have
a reference to the node saved in a variable. `Find` and `Find All` -keywords can be used to get these references.
| *Return value* | *Keyword* | *Argument* | *Description* |
| | Click On | submit | # Clicks on node containing text _submit_ |
| | Click On | xpath=//Button[@text="submit"] | # Clicks on button containing text _submit_ |
| | |
| ${node}= | Find | text="submit" | # Finds node containing text _submit_ and returns it |
| | Click On | ${node} | # Click on the node that was found earlier |

If we want to click every Button of the application, we could use Find All and call the click on keyword in a for loop:
| *Return value* | *Keyword* | *Argument* | | *Description* |
| ${buttons}= | Find All | css=.button | | # Get all button nodes to @{buttons} list variable |
| FOR | ${button} | IN | @{buttons} |
| | Click On | ${button} | | # Click each button in for loop |
| END | | |

=== 3.3 About XPath queries ===
 The FXML used in XPath lookups is generated on the fly and might differ from the actual FXML file the application uses. For
example a Button that contains a text value is split into a Parent node Button and a child node LabeledText. Numeric
values of attributes such as width and height are represented in their actual type format, which is usually double for
JavaFX nodes, so e.g. _height="600"_ becomes _height="600.0"_. This is important to note when using attribute values in the
XPath query, as _Node[@height="600"]_ will not be able to find anything.
| *Original FXML* | *Generated FXML* |
| <Button text="Click me" /> | <Button> <LabeledText text="Click me" ... /> </Button> |
| <Rectangle width="150" height="150" x="300" /> | <Rectangle width="150.0" height="150.0" x="300.0" /> |

Generated FXML usually contains also some values that are not specifically defined in the actual code, but can still be
used to differentiate nodes. To see the generated FXML used for the lookup, use `Log FXML` keyword. If the tested application
is large, it might be easier to first get a parent node closer to the actual point of interest and use it as a root for
the Log FXML keyword. This way the output will be easier to read and the log.html wont be millions of lines long.

=== 3.4 About Pseudo queries ===
All lookup queries return the first matching node, unless used with `Find All` keyword in which case all of the matches
will be returned. Usually this is not a problem, but pseudo classes require a some additional thought and care. For example
when the cursor is hovered on top of a JavaFX Button and the lookup is executed with a query  _pseudo=hover_, the top level
parent node of the button is returned instead of it. This happens because every parent of the button also contains the
hover pseudo state.

To avoid accidentally targeting parents of the expected node it is advisable to use the closest parent possible as a
root for the lookup. Root can be given as an argument for both Find keywords, or it can be defined by adding other queries
before using pseudo-query. Multiple pseudo-classes can be given in a single query to further narrow the amount of matching
nodes by using ';' separator, e.g. _pseudo=hover;focused_.

=== 3.5 Getting node parent ===
Sometimes you can find row according to value under it but want to get the row node. Use `Get Node Parent` keyword to
get parent node of wanted node (can be repeated if higher in node tree).

== 4. Argument types and return value types ==
JavaFXLibrary has built in support for [https://github.com/robotframework/jrobotremoteserver|jrobotremoteserver], which provides
a remote server interface for Robot Framework test libraries. This approach, however, has some limitations when it comes to
passing different [https://github.com/robotframework/jrobotremoteserver/wiki/User-Guide#Return_Types|return- and parameter types]
between Robot Framework and Java libraries. All simple object types like Strings, Integers, Booleans etc.. remain as they
are when passing them between Robot Framework and test libraries but in case of more complex ones, argument types are being
converted into Strings. For this situation, JavaFXLibrary keeps internal book keeping for mapping complex objects as
key:value pairs. This means that when e.g. JavaFX Node object is returned from library to Robot Framework as a return
value, this object is mapped into internal book keeping and only the key (String) representation of JavaFX Node is
returned. When this same key (String value) is passed back to JavaFXLibrary, it is converted back to actual JavaFX Node.
So, even though the return values are Strings, tester is able to use them 'as if' they were actual Nodes and e.g. call
object methods available for Nodes.

Let's take an example of a table that can contain complex objects, not just simple string values:
| *Return value* | *Keyword* | *Argument* | *Argument* | *Description* |
| ${table cells}= | Get Table Row Cells | id=table-id | 2 | # table cell Nodes are stored in map and string representations are returned |
| | Node Should Be Enabled | ${table cells}[column 0] | | # Library takes the string value as an argument and converts it back to Node |
| | Node Should Have Text | ${table cells}[column 1] | some text | | |
| | Click On | ${table cells}[column 2] | | # in case this cell is clickable |
| ${cell buttons}= | Find All |  css=.button | root=${table cells}[column 3] | # Finds all buttons from table cell Node |
| | Click On | ${cell buttons}[0] |  |  |
Most of the JavaFXLibrary keywords can use locators directly e.g. `Click On` keyword can take just css selector as an
argument, but in some cases it can be convenient to be able to pass in a 'Node' as an argument, especially when dealing
with complex data structures.

== 5. Used ENUMs ==
| *Definition* | *Values* |
| [https://github.com/TestFX/TestFX/blob/master/subprojects/testfx-core/src/main/java/org/testfx/robot/Motion.java|Motion] | DEFAULT, DIRECT, HORIZONTAL_FIRST, VERTICAL_FIRST |
| [https://docs.oracle.com/javafx/2/api/javafx/scene/input/MouseButton.html|MouseButton] | MIDDLE, NONE, PRIMARY, SECONDARY |
| [https://docs.oracle.com/javafx/2/api/javafx/scene/input/KeyCode.html|KeyCode] | Check the 'KeyCode' link on the left for allowed values. |
| [https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html|TimeUnit] | DAYS, HOURS, MICROSECONDS, MILLISECONDS, MINUTES, NANOSECONDS, SECONDS |
| [https://docs.oracle.com/javafx/2/api/javafx/geometry/VerticalDirection.html|VerticalDirection] | UP, DOWN |
| [https://docs.oracle.com/javafx/2/api/javafx/geometry/HorizontalDirection.html|HorizontalDirection] | LEFT, RIGHT |
| [https://docs.oracle.com/javafx/2/api/javafx/geometry/Pos.html|Pos] | BASELINE_CENTER, BASELINE_LEFT, BASELINE_RIGHT, BOTTOM_CENTER, BOTTOM_LEFT, BOTTOM_RIGHT, CENTER, CENTER_LEFT, CENTER_RIGHT, TOP_CENTER, TOP_LEFT, TOP_RIGHT |
